//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/angelica/RiderProjects/Documo/Documo/DocumoParser/Grammar/Documo.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class DocumoLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WORD=1, WHITESPACE=2, STARTPLACEHOLDER=3, ENDPLACEHOLDER=4, IMAGEPLACEHOLDER=5, 
		STARTREPEATINGSECTION=6, ENDREPEATINGSECTION=7, ACCESSOPERATOR=8, IF=9, 
		ENDIF=10, OPERATOR=11, EQUALSOPERATOR=12, NOTEQUALSOPERATOR=13;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LOWERCASE", "UPPERCASE", "DIGIT", "ANY", "WORD", "WHITESPACE", "STARTPLACEHOLDER", 
		"ENDPLACEHOLDER", "IMAGEPLACEHOLDER", "STARTREPEATINGSECTION", "ENDREPEATINGSECTION", 
		"ACCESSOPERATOR", "IF", "ENDIF", "OPERATOR", "EQUALSOPERATOR", "NOTEQUALSOPERATOR"
	};


	public DocumoLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DocumoLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "WORD", "WHITESPACE", "STARTPLACEHOLDER", "ENDPLACEHOLDER", "IMAGEPLACEHOLDER", 
		"STARTREPEATINGSECTION", "ENDREPEATINGSECTION", "ACCESSOPERATOR", "IF", 
		"ENDIF", "OPERATOR", "EQUALSOPERATOR", "NOTEQUALSOPERATOR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Documo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DocumoLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\xF', '\x65', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x6', 
		'\x6', '\x31', '\n', '\x6', '\r', '\x6', '\xE', '\x6', '\x32', '\x3', 
		'\a', '\x6', '\a', '\x36', '\n', '\a', '\r', '\a', '\xE', '\a', '\x37', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '^', 
		'\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x2', '\x2', '\x13', '\x3', '\x2', '\x5', 
		'\x2', '\a', '\x2', '\t', '\x2', '\v', '\x3', '\r', '\x4', '\xF', '\x5', 
		'\x11', '\x6', '\x13', '\a', '\x15', '\b', '\x17', '\t', '\x19', '\n', 
		'\x1B', '\v', '\x1D', '\f', '\x1F', '\r', '!', '\xE', '#', '\xF', '\x3', 
		'\x2', '\a', '\x3', '\x2', '\x63', '|', '\x3', '\x2', '\x43', '\\', '\x3', 
		'\x2', '\x32', ';', '\x5', '\x2', '\x32', ';', '\x43', '\\', '\x63', '|', 
		'\x4', '\x2', '\v', '\v', '\"', '\"', '\x2', '\x65', '\x2', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '!', '\x3', '\x2', '\x2', '\x2', '\x2', '#', '\x3', 
		'\x2', '\x2', '\x2', '\x3', '%', '\x3', '\x2', '\x2', '\x2', '\x5', '\'', 
		'\x3', '\x2', '\x2', '\x2', '\a', ')', '\x3', '\x2', '\x2', '\x2', '\t', 
		'+', '\x3', '\x2', '\x2', '\x2', '\v', '\x30', '\x3', '\x2', '\x2', '\x2', 
		'\r', '\x35', '\x3', '\x2', '\x2', '\x2', '\xF', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x11', '>', '\x3', '\x2', '\x2', '\x2', '\x13', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\x46', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'J', '\x3', '\x2', '\x2', '\x2', '\x19', 'N', '\x3', '\x2', '\x2', '\x2', 
		'\x1B', 'P', '\x3', '\x2', '\x2', '\x2', '\x1D', 'T', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', ']', '\x3', '\x2', '\x2', '\x2', '!', '_', '\x3', '\x2', 
		'\x2', '\x2', '#', '\x62', '\x3', '\x2', '\x2', '\x2', '%', '&', '\t', 
		'\x2', '\x2', '\x2', '&', '\x4', '\x3', '\x2', '\x2', '\x2', '\'', '(', 
		'\t', '\x3', '\x2', '\x2', '(', '\x6', '\x3', '\x2', '\x2', '\x2', ')', 
		'*', '\t', '\x4', '\x2', '\x2', '*', '\b', '\x3', '\x2', '\x2', '\x2', 
		'+', ',', '\t', '\x5', '\x2', '\x2', ',', '\n', '\x3', '\x2', '\x2', '\x2', 
		'-', '\x31', '\x5', '\x3', '\x2', '\x2', '.', '\x31', '\x5', '\x5', '\x3', 
		'\x2', '/', '\x31', '\x5', '\a', '\x4', '\x2', '\x30', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '.', '\x3', '\x2', '\x2', '\x2', '\x30', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\f', '\x3', '\x2', '\x2', '\x2', '\x34', '\x36', '\t', 
		'\x6', '\x2', '\x2', '\x35', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x38', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x39', ':', '\b', '\a', '\x2', '\x2', ':', '\xE', 
		'\x3', '\x2', '\x2', '\x2', ';', '<', '\a', '}', '\x2', '\x2', '<', '=', 
		'\a', '}', '\x2', '\x2', '=', '\x10', '\x3', '\x2', '\x2', '\x2', '>', 
		'?', '\a', '\x7F', '\x2', '\x2', '?', '@', '\a', '\x7F', '\x2', '\x2', 
		'@', '\x12', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\a', 'k', '\x2', 
		'\x2', '\x42', '\x43', '\a', 'o', '\x2', '\x2', '\x43', '\x44', '\a', 
		'i', '\x2', '\x2', '\x44', '\x45', '\a', '\x61', '\x2', '\x2', '\x45', 
		'\x14', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\a', 't', '\x2', '\x2', 
		'G', 'H', '\a', 'u', '\x2', '\x2', 'H', 'I', '\a', '\x61', '\x2', '\x2', 
		'I', '\x16', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\a', 'g', '\x2', '\x2', 
		'K', 'L', '\a', 'u', '\x2', '\x2', 'L', 'M', '\a', '\x61', '\x2', '\x2', 
		'M', '\x18', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\a', '\x30', '\x2', 
		'\x2', 'O', '\x1A', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\a', 'k', '\x2', 
		'\x2', 'Q', 'R', '\a', 'h', '\x2', '\x2', 'R', 'S', '\a', '\x61', '\x2', 
		'\x2', 'S', '\x1C', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\a', 'g', '\x2', 
		'\x2', 'U', 'V', '\a', 'p', '\x2', '\x2', 'V', 'W', '\a', '\x66', '\x2', 
		'\x2', 'W', 'X', '\a', 'k', '\x2', '\x2', 'X', 'Y', '\a', 'h', '\x2', 
		'\x2', 'Y', 'Z', '\a', '\x61', '\x2', '\x2', 'Z', '\x1E', '\x3', '\x2', 
		'\x2', '\x2', '[', '^', '\x5', '!', '\x11', '\x2', '\\', '^', '\x5', '#', 
		'\x12', '\x2', ']', '[', '\x3', '\x2', '\x2', '\x2', ']', '\\', '\x3', 
		'\x2', '\x2', '\x2', '^', ' ', '\x3', '\x2', '\x2', '\x2', '_', '`', '\a', 
		'?', '\x2', '\x2', '`', '\x61', '\a', '?', '\x2', '\x2', '\x61', '\"', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\a', '#', '\x2', '\x2', '\x63', 
		'\x64', '\a', '?', '\x2', '\x2', '\x64', '$', '\x3', '\x2', '\x2', '\x2', 
		'\a', '\x2', '\x30', '\x32', '\x37', ']', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
